CSS:
- CSS the language to style Web/HTML page
- CSS :Cascadig style sheet

Inline: 
<p style="color:red">Hello</p>

Inner style:
html 
<head>
<style>
p{
    color: red;
}
</style>
</head>

External:
 .css 
 Ex. styles.css

To link with HTML file:
 <link> 
 rel="stylesheet" 
 href=""
  
Extrnal file Uses:
1. We can apply single css file on multiple Web pages
2. Code sepration (html code: .html, style:.css)
3. Code optimization
4. Maintains of Code : We can change CSS of any selector, on multiple web pages using single change

CSS comments:
/* */

/* */ single comment

/*

multiline comments

*/

CSS syntax:
selector{
    css-propety: value;
    css-propety: value;
    css-propety: value;
    css-propety: value;
}

CSS selector:
1. Simple selector: 
    i.Name: html tag/ element name
    ii. Id: '#' 
    iii. Class:

ii. Id selector:
HTML : id as attribute : ex. <p id="myParagraph"> 
css: #myParagraph
Ex.
#myParagraph{
    color:green;
}

iii. Class selector: 
HTML: class as attribute: ex. <p class="textWrapper colorRed">
css : .textWrapper  
Ex. .textWrapper{
    color: blue;
}
.colorRed{
    color:red;
}

Grouping selector:
h1{
    color: red;
}
p{
    color: red;
}

h1,p{
    color:red
}

Universal selector:
* - all
*{
    margin: 0;
    padding: 0;
}


Day2:
Color:
background-color: //background color
color: //text color
border-color: // border color

Color values:
1. Color Name (140)
    Ex. red, blue, green, etc

    p{
        color:green;
    }

2. RGB : Red Green Blue : Intensity of color
r,g,b: min 0 - max 255
    red: rgb(255,0,0)
    green : rgb(0, 255, 0)
    black: rgb(0,0,0)
    white: rgb(255,255,255)

    rgb(0-255, 0-255, 0-255)

    p{
        color : rgb(0, 255, 0)
    }


    Gray shades:
    rgb(60,60,60)

    a - alpha (opatcity/transpernecy)
    rgba - Red Blue Green alpha value
    alpha value 0.0-1.0
    0.0- full transpernecy - white
    1.0- no transpernecy - not at all transpernecy
     red: rgb(255,0,0)
     red: rgba(255,0,0,1)

3. HEX: 00 00 00 - FFFFFF

prefix : #rrggbb

   rr gg bb : 00-ff 00-ff 00-ff

   red: #f00 : #ff0000
   green: #0f0 : #00ff00
   blue: #00f : #0000ff

    p{
        color: #00ff00 /*green*/
    } 

    white rgb(255,255,255) #ffffff
    black rgb(0,0,0) #000000

    rr gg bb : 00 00 00
    #000 

4. hsl : hue(color Intensity) saturation(gray shades) lightness(a -)
Hue : hsl(h, s, l) 0-360
r - 0 -119 red
g - 120-239
b - 240-360

lightness:
0% - black
100% - white

saturation: 0%-100% (Gray shades)

lightness: opatcity/transpernecy 0%-100%
50% - neither dark nor light

green: hsl(120,0%,100%)

red: hsl(0, 100%, 50%)

hsla : hue saturation lightness alpha

background-color:  hsl(240,100%,50%);

Day 3:

background:

1. background-color: color name, rgb, rgba, hex, hsl, hsla

2. background-image: url('') (relative path of your image)
html support for image:
.jpg/jpeg
.png
.gif

3. background-repeat: repeat (default)
                 : repeat-x (horizontally)
                 : repeat-y (vertically)
                 : no-repeat (none)  

4.  background-attachment : fixed
                          : scroll 
                          
5. background-position: top left
                        top right
                        bottom left
                        bottom right

6. background-size: auto
                  : inherit
                  : content
                  : cover                          

7. background (shorthand) : background-color background-image background-repeat background-attachment background-position;


position: top right bottom left

position: relative;
right:0

HTML elements position:
1. static : default. Normal flow. How we written elements in our html file. Top, right, bottom, left won't work with position static.

2. relative: render with normal flow. you can use here top, right, bottom, left.
It will create gap. Other element will not fill that gap.

3. fixed: screen/view port/ borwser  
position: fixed
top: 0;
right:0

It will not create gap.

4. absolute:
1. parent position: relative
2. position: absolute

5. sticky: Its a combination of relative and fixed

Box Model:
 1. border
 2. margin
 3. padding
 4. content
    1. height: height and actual height , min-height, max-height
    2. width: width and actual width, min-width, max-width

Border:
border shorthand propety:
- border: width(op) style(req) color(op)
Ex.: border: 1px solid black;(It will apply on top, right, bottom, left)   

1. Border width:
- apply on 4 positions
- Units in px,pt,em,cm,etc (11 px ) => (11px)
- thick, thin, medium

border-width: 1px; (t,r,b,l)
            : 2px 3px (t/b, r/l)
            : 2px 3px 4px 5px (2px-t,r,b,l)
            : 5px 15px 10px (5px, 15px- l,r, 10px-b)

border-width: 3px;
border-top-width:  5px 
border-top-width: 1px; (t,r,b,l)
            : 2px 3px (t/b, r/l)
            : 2px 3px 4px 5px (2px-t,r,b,l)
            : 5px 15px 10px (5px, 15px- l,r, 10px-b)

border-right-width
border-bottom-width
border-left-width


2. Border style:
-apply on 4 positions
-types
    - solid
    - dotted
    - dashed
    - groove
    - ridge
    - inset
    - outset
    - none
    - hidden 


                t     r    b       l
border-style: solid dotted dashed double
               t,r,b,l 
            : solid    (shorthand)
               t,b  l,r
            :solid dashed
                t     r,l    b
            : solid dotted dashed

border-style-top:  solid dotted dashed double
               t,r,b,l 
            : solid    (shorthand)
               t,b  l,r
            :solid dashed
                t     r,l    b
            : solid dotted dashed       

border-right-style
border-bottom-style
border-left-style

3. Border Color:
border-color: name,rgb,rgba,hex
               t,r,b,l 
            : red    (shorthand)
               t,b  l,r
            :red green
                t     r,l    b
            : red green yellow white  

border-top-color : black
border-right-color : black
border-bottom-color: black
border-left-color : black


Border to specific position:
border-top: width style color
border-right: width style color
border-bottom: width style color
border-left: width style color
Ex.: border-top: 1px solid black;

Border Radius:
border-radius: px,pt,cm,em,etc (In case we want rounded corners)

margin:
- To create space around html elements.
- Space outside border

Shorthand propety:
margin: 10px; (t/r/b/l)
margin: 10px 5px;(t/b, l/r)
margin: 10px 5px 15px;(t, r/l, b)
margin: 2px 4px 6px 8px;(t, r, b, l)

margin-top:
margin-right:
margin-left:
margin-bottom:

values:
1. auto; // borwser calculated
2. length: px,pt,em,pt,cm
3. %: for left and right margin: specifies margin in % of width of that element
    : for top and bottom margin: specifies margin in % of height of that element
4. inherit : values gets inherited from its parent

* We can specify negative values for margin

You can set the margin as auto to place your html element horizontally center with its container.(You must need to specify width)

margin collapse:
div: margin-bottom; : 50px;
div: margin: 80px;

div
 |
 |
 |
 |
 |
div 

padding:
To create space between content and border.
- inside border

Shorthand propety:
padding: 5px; (4postions)
padding: 5px 10px (t/b, l/r)
padding: 5px 10px 15px;(t, r/l, b)
padding: 5px 10px 5px 10px;(t, r, b, l)

padding-top:
padding-right:
padding-bottom:
padding-left:

values:
1. length: px,pt,cm,em,etc
2. %: for left and right padding: specifies padding in % of width of that element
    : for top and bottom padding: specifies padding in % of height of that element
3. inherit

* negative values are not allowed.

height and width:
content height/width
actual width : content width + padding + border
actual height : content height + padding + border

box-sizing: content-box(default) | border-box | intial | inherit

div{
    height: 20px; //content height
    width: 20px; // content width
    box-sizing: content-box;   
}

div{
    width: 200px;
    height: 200px;
    padding: 0px 20px;
    margin: 25px;
}

div{
    height: 60px;
    padding: 15px 20px;
    border: 5px solid black;
    box-sizing: border-box;
    margin: 25px;
}

min-width / max-width:

max-width : 
- To set maximum width of your element/content.
- content is lesser than your max-width it will not show any effect.
- But if device width is smaller than your max-width then it will increase height.

width < max-width // max-width ignore
width > max-width // width

min-width: 
- to set minimum width of your html content/element 
- content is larger than specified min-width it will not show any effect but if your device width is smaller than min-width it will add scroll.

max-height:
- to set maximum height of the element
- if content is smaller then max height has no element
- if content is larger then max-height will be apply, then that content will handled by overflow propety.


min-height:
- to set minimum height of an element
- if content is larger then min-height then it will have no effect
- if content is smaller then min-height will be applied.

div{
    width: 150px;
    height: 100px;
              t   r   b   l  
    padding: 2px 3px 4px 5px;
            t/r/b/l
    border: 2px solid black;
    box-sizing : content-box;
}

total/actual width = left(padding+border)+
                     content width/width +
                     right(padding+border)
                    = 5px + 2px+ 150px + 3px + 2px
                    = 162px

total/actual height = 

                    = 110px

box-sizing : content-box(default value) | 
             border-box |
             intial |
             inherit                       


box-sizing: border-box             

div{
    width: 150px;
    height: 100px;
              t   r   b   l  
    padding: 2px 3px 4px 5px;
            t/r/b/l
    border: 2px solid black;
   box-sizing: border-box ;
}
actual height/ total height = top(border+padding)+
                              content height +
                               bottom(border+padding) 
                        100 = 2px+2px+x+2px4px
                        100 = 10px+x
                        x = 100-10
                        x= 90px

content width = 138px

div{
    width: 150px;
    height: 100px;
    padding: 5px;
    border-top: 2px solid black;
}

overflow: overflow propety controls then content of your element if its too large, than your specify area.

value:
overflow:visible: default. Its render content after outside of element specify area.
overflow:hidden: to hide content after its specify area.
overflow:scroll: default add both scroll bar i.e vertical and horizontally
overflow: auto: same as scroll but when its needed.

*overflow propety works only one block level element

overflow-x: horizontal scroll bar
overflow-x:visible: default. Its render content after outside of element specify area.
overflow:hidden: to hide content after its specify area.
overflow:scroll: default add horizontal scroll bar 
overflow: auto: same as scroll but when its needed.

overflow-y: vertical scroll bar
overflow-y:visible: default. Its render content after outside of element specify area.
overflow-y:hidden: to hide content after its specify area.
overflow-y:scroll: default add vertical scroll bar 
overflow-y: auto: same as scroll but when its needed.

overflow-wrap: where borwser will break lines with long words, if content content too big.

value:
overflow-wrap : normal - word will not break, even if the overflow the container
overflow-wrap: anywhere - long words will break if content is overflow the container
overflow-wrap: break-word - word will break if content is overflow the container
overflow-wrap: intial - default
overflow-wrap: inherit - inherits from parent 


Outline:
outline: to draw line outside the border
        width style color
outline: 1px solid black;
- style is required value

outline-style: same as border style value
outline-width: same as border width value
outline-color: same as border color value

outline-style: solid dotted dashed ridge;

outline-offset: to add space between border and outline(white space)
              : length px, pt, em, pt,etc  


Text:
- color/background-color
- alignment
- decoration
- transformation
- spacing
- shadow

text-align: left(default) | right | center | justify

text-align-last: left(default) | right | center | justify

Vertical alignment:
vertical-align: to set element vertically align

values:
vertical-align: baseline(default)
vertical-align: text-top
vertical-align: text-bottom
vertical-align: sub;
vertical-align: super;


text-decoration: underline | line-through | overline | none
To set/remove text-decoration for your element
<del>: text-decoration: line-through
none: To remove text-decoration which is applied on your element

text-transform: uppercase | lowercase | captialize

spacing:
text/letters, line, word

letter-spacing: length px,pt,em,etc // to give/apply space between two characters

line-height: length px,pt,em,etc // to give/apply space between two lines 

word-spacing: length px,pt,em,etc // to apply space between two words

text-indent: length (unit-px,pt,em,pt,etc) // to apply space on first line of your element


white-space: normal(default) | nowrap |
            pre | pre-wrap | pre-line | break-spaces

// we are using white space propety to handle/controlled white space of your elements

              horizontal   vertically
text-shadow: 2px            2px     color


Links:
Links , Button , Menu

State:
default: text-decoration: underline, color: blue;
hover
visited
active

list-style-type:disc
               : circle
               : square
               : lower-roman i ii iii
               : upper-roman I II III
               : upper-alpha A B C
               : lower-alpha a b C

list-style-image: url('./test.png')

list-style-position: outside(default)
                   : inside

list-style-type: none

list-style: type position url()


Table:
table,th,td{
  border: 2px solid #ff0000;
  border-collapse: collapse  
}

th,td{
    padding:4px; //padding
}

tr:nth-child(even){
    background-color: #dddddd;
}
tr: hover{
    background-color: #eeeeee;
}
th{
    text-align: left;
    background-color: #00ff00;
}
th,td{
    border-bottom: 1px solid black;
    border-right: 1px solid black;
}
caption-side: top(default) | bottom | intial | inherit
caption{
    caption-side: bottom;
}
empty-cells: show | hide | intial | inherit


Table  Practical:
table  heading
row                column    sepration
caption at bottom
space should not be present between two borders
all the data nd heading should render on left
want hover effect on each row
also want some spacing between content and border 


display: block | inline | inline-block | none
block: 100% width, start on new line, default padding/margin
inline: takes required width, not start on new line, not gets any 
        default padding/margin, it will not allows to set height and width
inline-block: it acts as inline but it allows to set height and width, 
                but will not start on new line       
none: If we want to hide element from screen then we are using display: none. Its remove element from accessibility trees. It will not maintain previous height and width        


visibility: visible(default) | hidden | collapse
visible: default value.The element is visible
hidden: We can also hide element on screen using visibility: hidden. But it maintain its previous space i.e. height and width
collapse: used for table row<tr>,column<td>,colgroup<colgroup>. It removes column/row but will not affetc table layout.
(ngShow, ngHide, ngIf)


To align element at center:
align: 
horizontally : margin:auto;

vertically:
1. padding:
2. postion:absolute; top:50%; left: 50%; transform:translate(-50%,-50%)
3. line-height = element height
4. display: flex; justify-content:center; align-items:center;

z-index: Used to work with elements stack
z-index: negative/lower(behind)
It only works on positioned (relative,absolute,fixed and sticky)
We can specify positive as well as negative value
(* Mostly use with img having opatcity)

float: To position elements either on left/ right of the container
float: left;
float:right;
float:none(default);
float:inherit;

clear: To clear or to unset float propety for element. So that element can renderd on next line
clear:left;
clear:right;
clear:both;

Fonts:
font family:
    - families: sans-serif,serif,monospace,cursive
    - fonts: Arial, Verdana, Helvetica, Tahoma, Times New Roman, Courier New,
    - fallback: 
Ex. font-family: '', , Arial   
font-style: normal(default) | italic | oblique
font-size : length units(px,rem,pt,etc) | smaller | small | initial | inherit
font-weight: normal(default) | bold | bolder | lighter | 100-900 | initial | inherit
How to use google Fonts : third party: cdn or download
font variant : normal | small-caps | all-small-caps | titling-caps | intial | inherit  
shorthand - font : style variant weight size line-height family 

size and family required

Pseudo Classes:
A pesudo-class is used to define a special state of an element.
Styntax:a :link{  //default

        }
        a :visited{ //we already clicked

         }
         a :hover{  //mouse enter

         }

         a :active{ //clicked

         }
   

:hover 


Combinators:
descendant: Irrespective of hierarchy
 div p{
     background-color: red
 }

 child: >
 div > p{
     background-color: red
 }

adjacent selector + 
div + p{

}
 
 <p>
 <div> 
 <p>


 div
 span
 p

 general sibiling ~

 div ~ p{

 }


 div
 p

 div 
 span
 ul
 p


1. after h1 at any place if you h3 then will show that in green color
body h3{
  color:green  
}

2. if you get ul tag after any li Irrespective of anchor tag is present or not then put display none propety for ul
 li ul{
     display: none
 }
  li > a + ul{
      display: none
  }

3. table first row background color black
table > thead > tr / table thead > tr

table tbody > tr:first-child{
background-color: #000000;
color: #ffffff
}


4. table all rows should be background color gray
table tr

table tbody > tr{

}

 |    |   |


5. if you get span immediately after icon then put margin-right:10px
i + span{
    margin-right: 10px
}

6. all links on page having same css styling
body a{

}

descendant:
 space:
 will apply on all nested child/grandchild

child selector
>
child

adjacent 
+
immediate sibiling(next)

Gernaral sibiling
~
all sibiling(all next sibilings)

:first-child :

table tbody > tr:first-child{
background-color: #000000;
color: #ffffff
}

div:first-child{

}

div :nth-child(3){
    background-color: red
}

div:nth-child(3n+0){
    background-color:red
}

an+/-B
// n= 0,1,2,3,4 counter : //browser

a - multiple/ cycle size 
b - offset

3n+0 // 
3's multiple
3(0)+0 = 0  //0
3(1)+0 = 3 // 3
3(2)+0 = 3 // 6

table tr:nth-child(2n+0){  // table tr:nth-child(even)

}

table tr:nth-child(2n+1){  // table tr:nth-child(odd)

}

div:last-child{

}

div p:only-child{
    background-color:red
}


nth-last-child(an+b){
    
}

:first-of-type
:last-of-type
:only-of-type

div p:first-of-type{
    background-color:red
}