var c;

Why we need JS?
- To make web pages interactive or alive.
- JS is a scripting language.
- We can write our JS code in HTML using <script> tag.
- Its interpreted language.

History:
- Intially it was named as "Live script"
- Java support, JavaScript
- Independent, ECMAScript.

Difference between Java & JavaScript:
1. Java: Is an OOP's language
   JS: Is an Object based language. (Object)
2. Java: Compiled language
   JS: interpreted language
3. Java : Must need to specify datatype. Strictly 
   JavaScript: loosely type language   
4.

- To run javascript we need a special program called "javascript engine"

javascript engine:
v8 - Chrome, Opera, Edge
SpiderMonkey - Firefox
Charkar - IE
Squirrel Fish - Safari

Official refrence website: mdn

Requirements:
- Editor : VScode
- Browser: Chrome, Firefox, any
- nodejs: Required if we want to run js outside a Browser

Node installation:
- Download : https://nodejs.org/en/download/
- Check its get installed or not: node --version / node -v

javascript:
1997
ES5 - 2009 
ES6
ES7
ES8

Fundatmentals:
1. <script src=""> </script> : we can external JS in HTML. 
2.   <script> </script> : inner scripting

<script src="">
alert("Hi"); //ignore
</script>

Statements:
let a; let b;
let c = 2+3;
let a =1

Comments:
Single //
Multiple line /* */
Nested : /*
               /* */
         */

Modern JavaScript:
"use strict" : ES5   - Js directive

Variables:
We can declare Variables in 3 ways:
1. var - old school (Gloabl i.e. its available on window object, function level scope)
var PI = 3.14

2. let 
3. const
(ES5, block level scope)

function div(a,b){

   if(b>0){
      var result = a/b;
      console.log("Result",result)
   }
      console.log("Result",result)

}



let a = 2
a = 3

a =    3
      2000


/////////////////////////////////////////////////////
let []arr: int = [1,2,4]
arr.length = 3 * 4 = 12 bytes;

i              0     1    2 
val            1     2    4
mem a        5000  5004  5008
             5003  5007 
index=0  =   base addr + (i*datatype bytes)
             5000 + (1*4)
             5000 + 4
             5004

let arr = [1,2]  
let arr1 = [1,2]
if(arr==arr1){ // falsy
   both are similar
}

/////////////////////////////////////////////////////////////

const MAX_VAL = 100;
const PI = 3.14;

characters,$ and _, digit
Variables name never start with digit
Reserved can't be used

JavaScript is case sensitive language
let MAX; let max; let mAx;

javascript follows camel case naming convention
 let myVariable
 let testFunction

let a; //declartion
a = 7; //assignment

let b=7 //declartion + assignment

Hoisting:
var hoisted : declartion gets shift to top of its block
let,const it will never hoisted

function div(a,b){
//var result;
console.log("result",result) 
// result undefined
//Error: result is not defined
   if(b>0){
      var result = a/b;
      // result = a/b;
      console.log("Result",result)
   }
      console.log("Result",result)

}


function div(a,b){
console.log("result",result) 
//Error: result is not defined
   if(b>0){
      let result = a/b;
      console.log("Result",result)
   }
      console.log("Result",result)
//Error: result is not defined

}
const PI = 3;
PI = 3.14 //Error : 

var c= 9;


Datatypes in JS:
1. number  1, 1.1, 2^64
NaN - Not a Number
Infinity 
-Infinity
2. BigInt : arbitary length : 1n
3. String: "C", '', ``
let courseName = "JavaScript"
let versionNo = "ES2018"
console.log("We are learning " + courseName + "version " + versionNo) 
console.log(`We are learning ${courseName} version ${version}`)

4. Boolean: true / false (logical operation)
5. null: (empty)
6. undefined
let a;
typeof a //undefined
let b = undefined;

7. Symbol :let idSymb = Symbol("id")
           let id2Symb = Symbol("id") 
let num = 10;

8. Object: Complex data type : Collection of different datatypes, multiple key:value pairs
let person = {name:"Xyz", age:29}     


typeof / typeof() : To check datatype of Variables/ Literals
typeof num; //number
typeof(num); //number
typeof 2 //
typeof "My string" // string
typeof true // Boolean
********** typeof null // object
typeof undefined // undefined
typeof Symbol(1) // Symbol
typeof person // object


typeof typeof 0
- typeof 'number'
- string


Window pop boxes:
1. alert: Syntax: alert(message): To show message to user. OK
2. prompt: Syntax: let result = prompt(title/message,[defaultValue]) : To take an input from user. OK and Cancel
3. confirm: Syntax: let result = confirm(question). Ok and Cancel


DataType conversions:
Explicit type conversion:

String conversion:
String

let str = String(2) // "2"
let booleaToStr = String(true) //"true"
left nullToStr = String(null) //"null"

Numeric conversion:
Implicit conversion:
- With mathmatical operations(-,*,/,%,**)
- Math 

Explicit conversion:
- Number:
- +

let num = Number("12") //12
let num1 = +"12" //12

let num2 = Number(true) //1
let num3 = Number(false) //0

let num4 = Number(null) //0

let num5 = Number(undefined) // NaN

let num6 = Number("testing number conversion") // NaN
let num7 = Number(" ")/ Number("") // 0

Boolean conversions:
Logical operations: (<,>, <=, >=, == , !=, ===, !==)
Boolean()
let str = "my string"
let str = Boolean("w") // true ""
let num = Boolean(0) //false
let nullConv = Boolean(null) //false
let undefinedCov = Boolean(undefined) //false
let stringWithZero = Boolean("0") //true


+"8a" // NaN
+"" // 0
+"true" //NaN
+true //1
 
-"" //-0
-true //-1  

let add = 2 - true // 1

let add1 = 2 + "1" //21
let add1 = 2 - "1" //1

let add2 = 2 + null //2
let add = 2 + undefined //NaN

Operators:
operand / Operator


Unary, Binary, Ternary
-true = -1

Unary: ++, --, +, -
Single operand
++, -- : Variables, 2++ , 2-- 2 = 2+1
i++; // 2
i = i+1

-- 
temp--;
//4

prefix/ postfix:
++i //
i++ //

let i = 1
let temp = 5
let add = ++i + ++temp        // i++ + temp++ : 6
add  //  8  
i // 2
temp // 6


- , +:

Binary:
+,-,*, /, %, **
2 operands:

5%2 = 1

**
2 ** 3 = 8
4 ** 1/2 = 2


+:
2 + 2 // 4
"2" + "2" = 22
2 + "2" = 22
2 + 2 + "2" = 42
2 + "2" + 2  = 222
"2" + 2 + 2 = "22" + 2 = "222"

3 + "4" = 34
10 +  11 + "1" = 11 |  211 

-:
10 - 8 // 2
9 + 4 - "7" = // 137 | 20 | 6 | -137        6
 13-7 = 6

10 - 2 + "1" //81


10 + null + "2" //102 | 10null2 | 10 2
= 10 + "2"
= 102

9 + undefined + 9 = 18 | NaN
9 + NaN = NaN + 9 = NaN

9 + 0 + "false" = 90 | 900 |
= 9false

true + 0 + null = NaN | 10 | 1 | 
 = 1


+=, -= , *=, /=, %=
i++ : i = i+1
 n += 5
 n = n+5

a -= 2
a = a-2

r *=3
r = r*3


let a = "test"
a += 2 // a = a+2
       // a = "test" + 2
       // a = test2

let b = "2"
b -=2 // b = b - 2 
      // b + 2 = "2" - 2 = 2 - 2   
b //0         


Bitwise:
AND (&), OR(|), NOT(~), XOR(^), Left Shift (<<), Right Shift

 2 & 3 = 23 | 2

1 - 0 1
2 - 1 0
3 - 1 1


AND logical gate         OR logical gate           XOR logical
 i/p1 i/p2 o/p            i/p1  i/p2   o/p            o/p1
   0   0    0              0     0      0              0
   0   1    0              0     1      1              1 
   1   0    0              1     0      1              1
   1   1    1              1     1      1              0 


  1 0
& 1 1
--------
   1  0  // 2


2 | 3

   1  0
|  1  1
--------
   1   1  //3


2 ^ 3

      1   0
^     1   1
----------------
      0   1

// 1


Left shift <<
2 << 3
2 << 1
 00 // 0 


7 << 2

100 // 4


Right shift >>
 7 >> 2
 001 // 1

Operator precedence:
B, + , -, **, *, /, + , - , = ,'


Comparison :
<, <=, >, >=, ==, !=, ===, !==
******Whenever there is two different data types values are getting compared that time values gets converted to its numeric, even the Comparison is performing on boolean.


2 < 1 // false
2 >= 2 // true

'2' < '1' // false // unicode based
32 < 31 // false

'2' < 3 // true
2 < 3 // true

'01' > 1 // false
'01' == 1 //true

** null == undefined // true
** null == 0 // false
 null > 0 //false
 null < 0 //false

** null >= 0 // true
** null <=0 //true
 
undefined == 0 //false
undefined < 0 //false
undefined > 0 // false

true > 1 //false
false > 1 // false

false == '0' // false 
false == 0  // true
true == '0' // true

Boolean conversion:
'0' -  true
0 - false
'' - false
' ' - true \s
null - false
undefined - false
-1 - true

=== !==

== & ===
 == : it only compares value
 ===: It compares value as well as datatype also

 '0' == true // false
 // 0 == 1 // false
 '0' == 0 // true
  0 === '0' // false
  0 === false // false

0 != '0'   // true
0 !== '0'  //
undefined != null //
undefined == null // NaN == 0 // false

'a' == '39' //false
'a' == 'b'  // false
'a' == 'a' // true
'a' === 'a' // true

'a' > 'b' // false
'aa' > 'ab' //false

'02' > 'a' // false

Conditional Branching:
if(codition) {
   //code
}
//////////////

condition : truthy 

// if()..else
if(condition){
   // truthy
}else{
   //falsy
}

//if...else_if...else
let input;

if(condition){ //typeof input == number
//addition
}else if(condition){ //typeof input == string
// concatenation
}else{

}

if(age>18){
   console.log("User is eligible for voting")
}

if(a==b){
   console.log("a and b both are equal")
}else if(a>b){
      console.log("a is greater")
}else{
   console.log("b is greater")
}

if(){

}else{

}

a=10
b=20
c=30

a>b && a>c ? a : ( b>c ? b : c)


if(a>b && a>c){
      a is greater
}else if(b>c){
      b is greater
}else{
 c is greater
}

1 0    0

1 0 1

Logical operators: &&, ||, ! // boolean
- Short hand operators / Short circuit operators
&&- all true
|| - any one true
! - true=false vice-versa

let input = prompt("Please enter some number")
''
0
false

true

if(!input){
   alert("Please enter value")
}else{

}

2 && 0 && 5 // 0
2 || 0 || 4 // 2

!2 = false
1 = true

null - false
!false = ture

let input = prompt("Please enter your name");
if(!input){
   alert("Welcome guest")
}else{
   alert("Welcome "+ input)
}

Conditional operators/ Ternary operator:
if else:
condition ? if condition is true : if condition is false
if(condition){ }else{ }

let a= 5, b=3;
a > b ? alert("a is greater") : ("b is greater")

Nullish operator: ??
null / undefined
Syntax : first stmt ?? second stmt
if first stmt is not null / undefined then it will return first stmt value otherwise it return second stmt value

let userName = prompt("Enter your name")
alert("Hello " + userName ?? 'Guest')


|| &&

a ?? b 
if(a!==undefined && a!==null) {a} else {b}
a!==undefined && a!==null ? a : b


let isAllowed = false;
'',0,false 

isPassed ?? 'Exam not attempted'

let input = +prompt("Enter number") // 0

if(input){
   alert("Your entered ", input)
}else{
   alert("Please enter some valid number")
}
input ? alert("Your entered ", input) : ("Please enter some valid number")
 
let number1 = input ?? -1
number1 = -1

Loops: while , do...while, for
while(condition){
 //iteration
}

do{

}while(condition)

for(initialisation; condition ; step){

}

for(; ; ;) // infinite Loops

let i=10;
for(; i>0; i--){
   //block body
}


for(let i=10; i>0; i--){
   //block body
}
// i 

1. initialisation i =10
2. condition check 
3. if condition is true block execution
4. it will execute step action
5. Perform step 2
4. if condition is false it will execute block


break 
- loops/ switch
- break/stop the execution of loop

continue:
- break/skip iteration
- 

Label for break and continue:
outer : for(let i=0; i<5; i++){
      inner : for(let j=0; j<5; j++){
         if(i==j){
            break outer;
         }
         i, j
      }
}


Conditional Branching:
if else if else

switch(condition){
   case 'Add': 
         //
      [break]
   case 2:
         //
         [break]      
         .
         .
         .
   default :
      [break]     
}

Grouping cases:
switch(month){
   case 'Jan':
   case 'Feb':
   case 'Mar':
   case 'Apr':
                alert("Your favourite sesaon is summer")
                break;
   case 'May':
   case 'Jun':
   case 'Jul':
   case 'Aug':
             alert("Your favourite sesaon is rainy")
             break;
   case 'Sep':
   case 'Oct':
   case 'Nov':
   case 'Dec':
            alert("Your favourite sesaon is winter")
            break;
   default:
   alert("You haven't told your favourite season")
}


Functions:
declartion:

function functionName([param1,param2,...]){
//body   
}

Ex. function add(){
   let result = 2+3;
}
Ex. function add(a,b){
   let result = a + b
}

Local Variables:
Outer Variables:
Gloabl Variables:
blocklevel Variables:


Local variables:
- Declared inside function
- Only accessible inside function
function greetUser(){
   let message= "Hello world"
   alert(message)
}

Outer Variables:
-The outer variables are varaibles, it can be part of any function.
- parent function alive

function outer(){
   let a =2;
   function inner(){
      let b=5
      console.log(a) // 2
      let result = a+b
      if(result){
         let a = 9
      }
      console.log(a)// 2
   }
   console.log(a) // 2
}

Gloabl variables:
- Variables which declares outside of any function/block are called as Gloabl varaibles.
Global varaibles acan also access and modify by other functions.
- script alive

let a =6
function outer(){
   let a= 10
   function inner(){
      let a =2;
      let b=5 
      console.log(a) // 2
      let result = a*b
      if(result){
          a = 9
      }
      console.log(a) // 9
   }
   console.log(a) // 10 
}
 console.log(a)
outer();

Parameters:
- We can pass data to function by passing arguments while calling function.
- Parameters are nothing but local variables
- local scope / function scope

function add(a,b){ // let a=, let b=
 let result = a+b 
}
add() // a = undefined, b = undefined

Default Values:
If function is called but its arguments are not passed then Parameters should remain undefined

1. function add(a=0,b=0){ a=4,  b=5
   let result = a+b
}
add()
add(4,5)//

2. function add(a,b){
   if(a===undefined){
      a=0
   }
   if(b===undefined){
      b=0
   }
   let result = a+b
}

3. function add(a,b){
   a = a || 0
   b = b || 0
   let result = a+b
}

nullish operator
a = a ?? 0
b = b ?? 0


2 && 0 && 7 // 0
1 || 0 || 3 // 1
8 && 7 // 7


Return value:
- return result/airthmatic/etc
- return (undefined)

return: 

function createUse(){}
function getResult(){}
function setValue(){}
function checkNumber(){}
function showMessage()/displayMessage(){}
function calcAdd(){}

Function Expression:
let a =2, "test", false, null, undefined

function add(){
   let restult = 2+3
}

add();

Function without name "Anonymous function"

- Immediately Inovked Function execution (IIFE):
function (){
   alert("Hi")
}();


let a = function(){
   alert("Hi")
}
 //function Expression

a; //function(){
   alert("Hi")
}

a();


function outer(){
   let a= 10
   function inner(){
      //var a = undefined
      let b=5 
      console.log(a()) //  undefined()
      let result = a*b // undefined
      if(result){
          a = 9 // Error
      }
     var a = function (){alert("Hi")}
      console.log(a) // 2
   }
   console.log(a) // 10
}
 console.log(a) // Error



Difference between function declartion and function Expression:
1. 
2.
3.

Callback function:
Either Anonymous or function Expression

function handleInputs(a,b,add,concat){
   if(typeof a==="number" && typeof b==="number"){
      add(a,b)
   }else{
      concat(a,b)
   }
}

function addNumber(a,b){
   return "Addition is: "a+b
}

function concat(a,b){
   return "Concatenation is: "a+b
}

handleInputs(2,3,addNumber,concat)
handleInputs("test","string",addNumber,concat)


Arrow Function:
Syntax : ([param1,param2]) => ;

let add = () => {2+3}
console.log(add)  //undefined

Objects in JS:
Object is a Collection of key-value paired.
key - string/Symbol
value - can be anything. 

Syntax:
1. Using new Object() operator
2. {} // object literal Syntax

let myObj = new Object();
// myObj = {}

2. let myObj1 = {} // empty object

let user = {
   name: "xyz", //property
}

// To read/access object property/properties:
1. '.'
2. []

user.name
user['name']

//To  add properties in object dynamically
user.age = 30;
//To edit/update
user.name = "pqr"

user // {name:'pqr',age:30}

// To delete/remove properties in object:
- delete 
Ex. delete user.age
user //{name:'xyz'}


Computed properties:
let user = {}
let property = prompt("Which property you want to add in user object")
let value = prompt("Please tell us value for "+ property)
user[property] = value
alert("Now your user object is", user)

Property shorthand:
let user1 = {
   name:'xyz',
   age: 30
}

let user2 = {
   name: 'pqr',
   age:20
}

// Factory pattern:
function createUser(name,userAge){
   return {
      name : userName,
      age: userAge
   }
}

let user1 = createUser('xyz',30) // {name:'xyz',age:'30'}
let user2 = createUser('pqr',20) // {name:'pqr',age:'20'}
let user3 = createUser('bob',40) // {name:'bob',age:'40'}
let user5 = createUser('tom',20) // {name:'tom',age:'20'}
let user5 = createUser('guy',60) // {name:'guy',age:'60'}

Property shorthand
function createUser(name,age){
   return {
      name , // "name" : name
      age // "age" : age
   }
}

let myObj = {null:"test",1,"xyz"} // {"null":test, "1":xyz}


Property existance: (using Comparison operator and "in" operator)
let user = {name:"xyz",age:50, experience:undefined}
if(user.experience === undefined){
   console.log("experience property is not available in user object")
}

2. in operator:
Syntax: prop in obj // true 

if(!"experience" in user){
   console.log("experience property is not available in user object")
}

- Object ordering:
let testUser ={
   "fName":"test",
   "mName":"testM",
   "lName":"testL",
   age:30,
   city:"Pune",
   0:"test with number key"
}
for(let prop in testUser){
   alert(prop)
}

// Iteration 1: user : 1st key: prop = 0; hasNext
{
   itr = 0:"test with number key", hasNext= true
   "fName":"test", hasNext=true
   "mName":"testM",
   "lName":"testL",
   age:30,
   city:"Pune",hasNext=false
}


- for(let key in obj){

}


-Object refrencing and copying
let a =2;
let str = "Hello world"

2
3000 = a


Hello world
10000 = str


let user ={name:"xyz",age:25,}

                  |name: |  age:  |
                  |Bob   |   25   |
                  |______|________|
                  20000   4       20008

20000       20000
user        userCopy 

let userCopy = user; // copy by refrence
//userCopy 20000
userCopy.name // xyz
user.age // 25
userCopy.name = "test"
user.name //test

-Object Comparison
user === userCopy //true

let a = {}   // a = 90000
let b = {}   // b = 3000
a === b //false

-Object cloning, merging and Object.assign
   - for...in loop

let userCopy1 = {}
let a = true
 user['key'] //undefined
 user['name'] //xyz

 user[name] // name is not defined
// name : not defined
  let user ={name:"xyz",age:25}

      for(let key in user){
         userCopy1[key] = user[key]
      }
//1st iteration key = 'name'

Left side evaluation:
//  userCopy1[key] = user[key]
//user[key] : key= name : user['name'] : xyz
// userCopy1[key] = xyz

Right side evaluation:
// userCopy1[key]
// userCopy1[key] : userCopy1['name']

userCopy1['name'] = "xyz" //update/add
let student = {
   rollNo:1,
   name:"xyz",
   class:"fy"
}
let copyOfStudent = {};
for(let prop in student){
   copyOfStudent[prop] = student[prop]
}
// copyOfStudent:  {} | {undefined, undefined, undefined} | undefined | {undefined} | Error
// {prop:undefined}
// copyOfStudent: {rollNo:undefined,
   name:undefined,
   class:undefined}

// {
   rollNo:1,
   name:"xyz",
   class:"fy"
}


let user= {id:1, name:"xyz"}
user.name="Bob" //{id:1, name:"Bob"}
user['role'] = "admin" // {id:1,name:"Bob", role:"admin"}
user[id] =10 // {id:10, name:"Bob",role:"admin" } // wrong ans
user[my] = "Singing" // {id:10, name:"Bob", role:"admin", my:"Singing"} //wrong ans





   - Object.assign
   - spread operator ...

- Object modification with const declartion
- Garbage Collection
- "this" keyword
- Constructor function
- optional chaining



Object.assign: object copy()
Syntax : Object.assign(destinantion,obj1, obj2,...)

let users ={}

let user1 = {name:"Bob",age:30, role:"admin"}
let user2 = {name:"Tom",age:29, role:"user"}

Spread operator:
let userCopy1 = {...user1}


const user = {name:"XYZ",age:30} 
user.age = 35; // allowed
console.log("User",user)
user = {} //Error

Grabage Collection:
let user = {name:"xyz",age:20}  //3000
let copyUser = user; //3000

user = null //null

copyUser // 3000

copyUser = null


"this" keyword:

let usr ={name:"t",age:33}
usr.name ;

function CreateUser(name,age){
   this.name = name; //"Bob"
   this.age = age; // 26
   // return this(Implicit)
}

//let user = CreateUser("test",30)
let user1 = new CreateUser("Bob",26)
{}
{}.CreateUser("Bob",26)
this = {name:"Bob",age:26}
return this(Implicit) // {name:"Bob",age:26}
user1 =  {name:"Bob",age:26}


let user2 = new CreateUser("Tom",45)
let user3 = new CreateUser("test",23)
let user4 = new CreateUser("zyx",26)
let user5 = new CreateUser("Bob1",44)
let user6 = new CreateUser("Jay",83)
let user7 = new CreateUser("Guy",43)
let user8 = new CreateUser("Ryan",21)


function CreateUser(name,age){
   this.name = name; //"Bob"
   this.age = age; // 26
   this.greet =  function(){
      alert("Hi")
   }
   // return this(Implicit)
}


function CreateUser(name,age){
   this.name = name;
   this.age = age;
   this.getName = function(){
      alert(this.name)
   }
}

let user = {
   name:"xyz",
   age:30
   greet: function (){
      alert(user.name)
   }
}

let admin = user;
user = null
admin.greet()



Optional chaining: 